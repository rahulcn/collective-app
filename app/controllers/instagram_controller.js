// Generated by CoffeeScript 2.0.0-beta8
ApplicationController.controller('InstagramController', function ($scope, $location, instagramAPI, $routeParams, $timeout) {
  var signed_in;
  $scope.setActive([
    'instagram',
    $routeParams.filter
  ]);
  $scope.service = new instagramAPI($routeParams);
  signed_in = !_.isNull(window.localStorage.getItem('in_user'));
  if (signed_in) {
    if (_.isEmpty($routeParams.filter)) {
      $location.path('/instagram/feed');
    }
  } else {
    $location.path('/instagram');
  }
  if (signed_in)
    switch ($routeParams.filter) {
    case 'follows':
      $scope.service.fetchUsers();
      break;
    case 'followed-by':
      $scope.service.fetchUsers();
      break;
    default:
      $scope.service.firstPage();
    }
  $scope.login = function () {
    return $scope.service.login();
  };
  $scope.comment = {};
  $scope.comment.text = 'Comment ... ';
  $scope.commentCreate = function (event) {
    var text;
    text = $('input', event.currentTarget).val();
    console.log('--> Submitting form');
  };
  $scope.popHeart = function (event) {
    var create, i, margin, popSize, position, total;
    this.elem = $(event.target);
    popSize = [
      50,
      40
    ];
    margin = 14 / 2;
    i = 0;
    total = 14 * 2;
    this.elem.toggleClass('heart-active');
    position = function (this$) {
      return function (heart, size) {
        var maxX, maxY, minX, minY, w;
        w = this$.elem.parent();
        minX = w.scrollLeft() + margin;
        maxX = w.scrollLeft() + w.width() - size[0] - margin;
        minY = w.scrollTop() + margin;
        maxY = w.scrollTop() + w.height() - size[1] - margin;
        heart.css('left', Math.round(minX + Math.random() * (maxX - minX)) + 'px');
        heart.css('top', Math.round(minY + Math.random() * (maxY - minY)) + 'px');
      };
    }(this);
    create = function (this$) {
      return function () {
        var heart;
        ++i;
        heart = $('<div class="heart heart-active pop"></div>');
        heart.bind('animationend oanimationend MSAnimationEnd ' + 'mozAnimationEnd webkitAnimationEnd', function () {
          $(this).remove();
        });
        position(heart, popSize);
        heart.appendTo(this$.elem.parent());
        if (i < total)
          setTimeout(create, Math.random() * 250);
      };
    }(this);
    if (this.elem.hasClass('heart-active'))
      create();
    $scope.service.likeToggle({
      media_id: this.elem.parent().parent().data('id'),
      method: this.elem.data('method')
    });
  };
});
